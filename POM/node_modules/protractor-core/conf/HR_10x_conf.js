var baseConf = require('./base_conf.js');
var baseConfig = new baseConf();
const jasmine2ScreenshotReporter = require('protractor-jasmine2-screenshot-reporter');

exports.config = {
   directConnect: true,

   // Capabilities to be passed to the webdriver instance.
   capabilities: {
     'browserName': 'chrome',
     'loggingPrefs': {
         'browser': 'ALL'
     },
     'shardTestFiles': true,
     'maxInstances': 1,
   },

   // Framework to use. Jasmine is recommended.
   framework: 'jasmine',

   // Spec patterns are relative to the current working directly when
   // protractor is called.
   specs: ['../../../../../specs/10x/*.js'],

   // Options to be passed to Jasmine.
   jasmineNodeOpts: {
     defaultTimeoutInterval: 40000,
     showColors: true,
     isVerbose: false,
     realtimeFailure: true,
   },
   
   baseUrl: 'https://stage.upwork.com/',
   allScriptsTimeout: 500000,
   restartBrowserBetweenTests: false,
   
   params: {
     testenv: 'stage',
     report: 'result',
     globalTimeout: baseConfig.timeout.pageLoad,
     waitForAngular: {
       angularFlag: true,  //Only use false if timeout/interval for polling is failing.
       angularDelay: baseConfig.timeout.angularDelay //this only goes into affect if angularFlag=false
     },
   },
         
   onPrepare: function () {
      browser.manage().timeouts().pageLoadTimeout(baseConfig.timeout.pageLoad);
      browser.manage().timeouts().implicitlyWait(baseConfig.timeout.implicitWait);
   
      // jasmine2 screenshot reporter
      jasmine.getEnv().addReporter(new jasmine2ScreenshotReporter({
         dest: browser.params.report,
         filename: 'report.html',
         reportOnlyFailedSpecs: false,
         captureOnlyFailedSpecs: true
      }));
   
      var jasmineReporters = require('jasmine-reporters');
   
      jasmine.getEnv().addReporter(new jasmineReporters.JUnitXmlReporter({
         savePath: browser.params.report,
         consolidateAll: false
      }));
   
      jasmine.getEnv().addReporter(new jasmineReporters.NUnitXmlReporter({
         savePath: browser.params.report
      }));
   
      jasmine.getEnv().addReporter(new jasmineReporters.TapReporter());
   
      jasmine.getEnv().addReporter(new jasmineReporters.TerminalReporter({
         verbosity: 3,
         color: true,
         showStack: true
      }));
      
      // users for HR offers/contracts testing
      global.hr_client     = {id: 'em16051917465371', password: 'strange!', company_ref: 3286570};
      global.hr_freelancer = {id: 'ic16041316342088', password: 'strange!', dev_ref: 8610048};
   },
   
};