/**
 * @name localhost_conf
 * @description Standard conf to be use for automation.
 *
 */

var HtmlReporter = require('protractor-html-screenshot-reporter');
var baseConf = require('./base_conf.js');
var baseConfig = new baseConf();

exports.config = {

  seleniumAddress: 'http://localhost:4444/wd/hub',

/* //Please use --browser=chrome to run; uncomment if you want to run it locally with these options
  multiCapabilities: [
    {
      'browserName': 'chrome',
      //shardTestFiles: true,
      //maxInstances: 5,
    },
    //{'browserName': 'firefox'},
  ],
*/

  specs: [
    '../specs/test_spec.js'
  ],

  params: {
    report: 'result',
    globalTimeout: baseConfig.timeout.pageLoad,
    waitForAngular: {
      angularFlag: true,  //Only use false if timeout/interval for polling is failing.
      angularDelay: baseConfig.timeout.angularDelay //this only goes into affect if angularFlag=false
    }
  },

  allScriptsTimeout: baseConfig.timeout.allScriptsTimeout,

  onPrepare: function () {
    browser.manage().timeouts().pageLoadTimeout(baseConfig.timeout.pageLoad);
    browser.manage().timeouts().implicitlyWait(baseConfig.timeout.implicitWait);
    browser.driver.manage().window().setSize(1000,1000);
    // Add a screenshot reporter and store screenshots to results folder.  It will create folder at the location protractor was ran.
    jasmine.getEnv().addReporter(new HtmlReporter({
      baseDirectory: browser.params.report,
      docTitle: 'Reports',
      takeScreenShotsOnlyForFailedSpecs: true
    }));
    require('jasmine-reporters');
    jasmine.getEnv().addReporter(
      new jasmine.JUnitXmlReporter(browser.params.report, true, true, 'result-')
    );
  },

// Options to be passed to Jasmine-node.
  jasmineNodeOpts: {
    showColors: true,
    defaultTimeoutInterval: baseConfig.timeout.defaultTimeoutInterval
  }

}
;
