var HtmlReporter = require('protractor-jasmine2-screenshot-reporter');
var baseConf = require('./base_conf.js');
var baseConfig = new baseConf();
var protractor = require('protractor');

exports.config = {

  seleniumAddress: 'http://localhost:4444/wd/hub',

  rootElement: '[data-ng-app]',

  baseUrl: 'https://stage.upwork.com',

  specs: [
    '../../../../../specs/si/**.js',
  ],

  params: {
    login: {
      username: 'am16021423103299',
      password: 'strange!',
      redirect: undefined
    },
    report: 'result',
    globalTimeout: baseConfig.timeout.pageLoad * 3,
    waitForAngular: {
      angularFlag: true, // Only use false if timeout/interval for
      // polling is failing.
      angularDelay: baseConfig.timeout.angularDelay * 3
      // this only goes into affect if angularFlag=false
    }
  },

  allScriptsTimeout: baseConfig.timeout.allScriptsTimeout * 3,

  onPrepare: function () {
    browser.manage().timeouts().pageLoadTimeout(
      baseConfig.timeout.pageLoad * 3);
    browser.manage().timeouts().implicitlyWait(
      baseConfig.timeout.implicitWait * 3);
    browser.driver.manage().window().setSize(1024, 980);
    // Add a screenshot reporter and store screenshots to results folder. It
    // will create folder at the location protractor was ran.
    jasmine.getEnv().addReporter(new HtmlReporter({
      baseDirectory: browser.params.report,
      docTitle: 'NWP Reports',
      takeScreenShotsOnlyForFailedSpecs: true
    }));
    var jasmineReporters = require('jasmine-reporters');
    jasmine.getEnv().addReporter(
      new jasmineReporters.JUnitXmlReporter({
        savePath: browser.params.report,
        consolidateAll: false
      }));
    /*        require('jasmine-reporters');
     jasmine.getEnv().addReporter(
     new jasmine.JUnitXmlReporter(browser.params.report, true, true,
     'result-'));
     */
    // login
    browser.driver.get(browser.baseUrl + '/login' +
      // params.login.redirect was passed in params add ?redir... to url
      (browser.params.login.redirect ? ('?redir=' + encodeURIComponent(browser.params.login.redirect)) : ''));
    browser.driver.findElement(by.id('login_username')).sendKeys(browser.params.login.username);
    browser.driver.findElement(by.id('login_password')).sendKeys(browser.params.login.password);
    browser.driver.findElement(by.tagName('button')).click();

    return browser.driver.wait(function () {
      return browser.driver.getCurrentUrl().then(function (url) {
        return !/(login)/i.test(url);
      });
    }, 10000);
  },

  // Options to be passed to Jasmine-node.
  jasmineNodeOpts: {
    showColors: true,
    defaultTimeoutInterval: baseConfig.timeout.defaultTimeoutInterval * 3
  }

};
