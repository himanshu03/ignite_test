/**
 * @name eom_conf.js
 * @description Standard conf to be use for automation on mobile web pages.
 *
 */

//var HtmlReporter = require('protractor-html-screenshot-reporter');
var jasmine2ScreenshotReporter = require('protractor-jasmine2-screenshot-reporter');

var baseConf = require('./base_conf.js');
var baseConfig = new baseConf();

exports.config = {

  seleniumAddress: 'http://localhost:4444/wd/hub',

  capabilities: {
    'browserName': 'chrome',
    'chromeOptions': {
      'args': [
        '--window-size=320,580',
        '--test-type',
        '--use-mobile-user-agent',
        "--user-agent='Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.20 Mobile Safari/537.36'"
      ]
    }
  },

  specs: [
    '../specs/WP-lam_spec.js'
  ],

  params: {
    testenv: 'stage',
    jobPosting: 'V1',
    report: 'result',
    globalTimeout: baseConfig.timeout.pageLoad,
    waitForAngular: {
      angularFlag: true,  //Only use false if timeout/interval for polling is failing.
      angularDelay: baseConfig.timeout.angularDelay //this only goes into affect if angularFlag=false
    }
  },

  allScriptsTimeout: baseConfig.timeout.allScriptsTimeout,

  // Framework to use. Jasmine 2 is recommended.
  framework: 'jasmine2',

  onPrepare: function () {
    browser.manage().timeouts().pageLoadTimeout(baseConfig.timeout.pageLoad);
    browser.manage().timeouts().implicitlyWait(baseConfig.timeout.implicitWait);
    browser.driver.manage().window().setSize(400,800);


    // jasmine2 screenshot reporter
    jasmine.getEnv().addReporter(
      new jasmine2ScreenshotReporter({
        dest: browser.params.report,
        filename: 'report.html',
        reportOnlyFailedSpecs: false,
        captureOnlyFailedSpecs: true
      }));

    var jasmineReporters = require('jasmine-reporters');

    jasmine.getEnv().addReporter(
      new jasmineReporters.JUnitXmlReporter({
        savePath: browser.params.report,
        consolidateAll: false
      }));

    jasmine.getEnv().addReporter(
      new jasmineReporters.NUnitXmlReporter({
        savePath: browser.params.report
      }));

    jasmine.getEnv().addReporter(
      new jasmineReporters.TapReporter());

    jasmine.getEnv().addReporter(
      new jasmineReporters.TerminalReporter({
        verbosity: 3,
        color: true,
        showStack: true
      }));


  },

// Options to be passed to Jasmine-node.
  jasmineNodeOpts: {
    showColors: true,
    defaultTimeoutInterval: baseConfig.timeout.defaultTimeoutInterval
  }

}
;
