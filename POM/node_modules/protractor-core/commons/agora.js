/**
 * @ngdoc object
 * @name agora
 * @description
 * 	Agora services to be used for easily creating mock data.<br>
 * 	See {@link https://confluence.elance-odesk.com/display/Engineering/Rooms+API} Rooms API <br>
 *  See {@link http://front.staging.agora.odesk.com:8064/apidocs/index.html#!/persons/getPersonOrganizations_GET} Persons API | Changeme@1! <br>
 *  See {@link http://visionmedia.github.io/superagent/} SuperAgent HTTP Request
 */

var request = require('superagent');
var envConf = require('../conf/env_conf.js'), env = new envConf();

/**
 * @ngdoc Methods
 * @author Alex Arapu
 * @name sample
 * @methodOf agora
 * @description return random value from array
 * @return {string|object|int} random value from array
 */
Array.prototype.sample = function() {
    return this[~~(Math.random() * this.length)];
};

var agora = function (brw) {
  'use strict';
  var that = this;
  if(brw){
    that.browser = brw;
  }

  this.roomsEndPointsUrl = env.data.roomsEndPointsUrl;
  this.personPostEndPointsUrl = env.data.personPostEndPointsUrl;
  this.personEndPointsUrl = env.data.personEndPointsUrl;
  this.contactEndPointsUrl = env.data.contactEndPointsUrl;
  this.subscriptionEndPointsUrl = env.data.subscriptionEndPointsUrl;
  this.pricingEndPointsUrl = env.data.pricingEndPointsUrl;
  this.connectsEndPointsUrl = env.data.connectsEndPointsUrl;
  this.promotionsEndPointsUrl = env.data.promotionsEndPointsUrl;
  this.subscriptionBatchServicesDSEndPoint = env.data.subscriptionBatchServicesDSEndPoint;
  /**
   * @ngdoc Methods
   * @name createRoomsWithTwoUsers
   * @methodOf agora
   * @description This will create a room for two people who have the same orgId <br>https://confluence.elance-odesk.com/display/Engineering/Rooms+API#RoomsAPI-POST
   * @param {object} roomObject An object of array that contain data about the room. Example: <br>
   <pre>
   var roomObject = {
    user1 : {
      name: 'Lam Le',
      username: 'lamle007',
      password: 'n00bWHIP!',
      orgId: '505411921301827584',
      userId: '504390546860634112'
    },
    user2: {
      username : 'c1a26663',
      password : 'n00bWHIP!',
      orgId: '505411921301827584',
      userId: '505412514485825536',
      role: 'admin'
    },
    roomOrgId : '505411921301827584',
    roomName : 'WP-369.' + commonsMethod.getRandomNumber(),
    roomTopic : 'WP-369 Topic',
    isPublic : false,
    is1On1 : false
    };
   </pre>
   */
  this.createRoomsWithTwoUsers = function (roomObject) {
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.roomsEndPointsUrl;
    var requestBody = '{"roomName":"' + roomObject.roomName + '","is1On1":' + roomObject.is1On1 + ',"isPublic":' + roomObject.isPublic + ',"topic":"' + roomObject.roomTopic + '",' +
      '"orgId":"' + roomObject.roomOrgId + '",' +
      '"creator":{ "userId":"' + roomObject.user1['userId'] + '","orgId":"' + roomObject.user1['orgId'] + '"},' +
      '"users":[{' +
      '"userId": "' + roomObject.user2['userId'] + '",' +
      '"orgId": "' + roomObject.user2['orgId'] + '",' +
      '"role": "' + roomObject.user2['role'] + '"' +
      '}] }';
    console.log(requestBody);
    request
      .post(requestUrl)
      .send(requestBody)
      .set('Content-Type', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name createRoomsJsonRequest
   * @methodOf agora
   * @description This will create a room.  This is for advance user using json body.
   * @param {json} requestBody Use json data to create a room. <br>
   <pre>
   requestBody =
   '{"roomName":"wplamle","is1On1":false,"isPublic":false,"topic":"lam topic",
    "orgId":"504390546869022721",
    "creator":{"userId":"504390546860634112","orgId":"504390546869022721"},
    "users":[{"userId": "505412514485825536", "orgId": "505411921301827584", "role": "admin" }]}'
   </pre>
   */
  this.createRoomsJsonRequest = function (requestBody) {
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.roomsEndPointsUrl;
    /*requestBody = '{"roomName":"wplamle","is1On1":false,"isPublic":false,"topic":"lam topic",' +
     '"orgId":"504390546869022721","creator":{"userId":"504390546860634112","orgId":"504390546869022721"},' +
     '"users":[{"userId": "505412514485825536", "orgId": "505411921301827584", "role": "admin" }]}';*/
    console.log(requestBody);
    request
      .post(requestUrl)
      .send(requestBody)
      .set('Content-Type', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  this.getRoomsData = function (roomId,requestBody) {
    var requestUrl = this.roomsEndPointsUrl + '/' + roomId;
    var deferredRequest = protractor.promise.defer();
    request
      .get(requestUrl)
      .query(requestBody)
      .set('Accept', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };


  /**
   * @ngdoc Methods
   * @name createPerson
   * @methodOf agora
   * @description Create a person.  This is not a feature as there is no supported service for this.  You will need to wait for 2-5 minutes afterward.
   * This is dependent on the mail_gui fetching your verification email.
   * @param {object} personObject An object of array that contain data about the person. Default pass: strange! ; Username cannot exceed 16 chars
   * Example: <br>
   <pre>
   var personObject = {
      userName : 'lamle001001',
      firstName : 'lam',
      lastName : 'le',
      countryCode: '222',
      emailAddress : 'lamle001001@elance-odesk.com',
   dashFlag : 'true',
   clientFlag : 'false'
   };
   </pre>
   Here's an example of how to use this:<br>
   it('CREATE USER', function (done) {
    agora.createPerson(personObject).then(function (success){
      console.log('create user post done');
      done();
    });
    console.log('waiting for email to be verify');
    commons.sleep20(60);
  });
   */
  this.createPerson = function (personObject){

    var requestBody =
      '{"person":{' +
        '"legacyId": "' + personObject.userName + '",' +
        '"personName": { "lastName": "' + personObject.lastName + '", "firstName": "' + personObject.firstName + '"},' +
        '"location": { "country": "' + personObject.countryCode + '" } },' +
        '"email": "' + personObject.emailAddress + '"}';
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.personPostEndPointsUrl + '?background=true&invite=' + personObject.dashFlag + '&client=' + personObject.clientFlag;
    console.log(requestUrl);
    console.log(requestBody);
    console.log('default pass: strange!');
    request
      .post(requestUrl)
      .send(requestBody)
      .set('Content-Type', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name deleteRoom
   * @methodOf agora
   * @description Delete a room.
   * @param {string} roomId A string of the roomId <br>
   */
  this.deleteRoom = function (roomId) {
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.roomsEndPointsUrl + '/' + roomId;
    request
      .del(requestUrl)
      .set('Content-Type', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name getPersonsNid
   * @methodOf agora
   * @description Get a persons's full detail by using his username
   * @param {string} username A string of the username <br>
   */
  this.getPersonsNid = function (username) {
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.personEndPointsUrl + '/nid/' + username;
    request
      .get(requestUrl)
      .set('Accept', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc getPersonsOrgs
   * @name getPersonsNid
   * @methodOf agora
   * @description Get a company's full detail by using the person's userid
   * @param {string} userid A string of the userid <br>
   */
  this.getPersonsOrgs = function (userid) {
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.personEndPointsUrl + '/' + userid + '/orgs';
    request
      .get(requestUrl)
      .set('Accept', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name getPersonsNid
   * @methodOf agora
   * @description Get a persons's full detail by using his username
   * @param {string} username A string of the username <br>
   */
  this.getPersonsNid = function (username) {
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.personEndPointsUrl + '/nid/' + username;
    request
      .get(requestUrl)
      .set('Accept', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name getPersonsOrgs
   * @methodOf agora
   * @description Get a company's full detail by using the person's userid
   * @param {string} userid A string of the userid <br>
   */
  this.getPersonsOrgs = function (userid) {
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.personEndPointsUrl + '/' + userid + '/orgs';
    request
      .get(requestUrl)
      .set('Accept', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };


  /**
   * @ngdoc Methods
   * @name putSubscribeObo
   * @methodOf agora
   * @description PUT /subscription/subscribeobo, This API would allow a valid receiver to subscribe a plan and If the
   * user is having current and future subscriptions it will expire these all, and subscribe the user to the new plan.
   * @param {object} personObject An object of array that contain data about the subscription person.<br>
   *   * Example: <br>
   <pre>
   var  subscriptionPerson = {

    forceUnSubscribe :'true',
    productId : '1',
    refId : '547851217763307521',
    refType :'ORG'
  };
   </pre>
   Here's an example of how to use this:<br>
   it('subscribe a membership', function (done) {
      agora.subscribeObo(subscriptionPerson).then(function (success){
        console.log('DONE: subscribeObo completed!');
        done();
      });
      commonsMethod.sleep20(10);
  });
   */
  this.putSubscribeObo = function (personObject){

    var requestBody =
      '{' +
        '"forceUnSubscribe":"' + personObject.forceUnSubscribe + '",' +
        '"productId":"' + personObject.productId + '","refId":"' + personObject.refId + '",' +
        '"refType":"' + personObject.refType + '"}';
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.subscriptionEndPointsUrl + '/subscribeobo?';
    console.log(requestUrl);
    console.log(requestBody);
    request
      .put(requestUrl)
      .send(requestBody)
      .set('Accept','application/json')
      .set('Content-Type','application/json')
      .set('OBOAgent', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
          console.log("error");
        } else {
          deferredRequest.fulfill(res);
          console.log("success");
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name putSchedule
   * @methodOf agora
   * @description PUT /subscription/putSchedule, This API will take in a subscription ID and a date and will update the
   * next charge date on that subscription to that date.
   * @param {object} subscriptionScheduleObject An object of array that contain data about the subscription details.<br>
   *   * Example: <br>
   <pre>
   var  subscriptionScheduleObject = {
    scheduledDate : '2015-05-19',
    id :'0000'
  };
   </pre>
   Here's an example of how to use this:<br>
   it('change subscription schedule', function (done) {
      agora.putSchedule(subscriptionScheduleObject).then(function (success){
        console.log('DONE: RESCHEDULE COMPLETED!');
        done();
      });
      commonsMethod.sleep20(20);
  });
   */
  this.putSchedule = function (subscriptionScheduleObject){

    var requestBody =
      '{' +
        '"scheduledDate":"' + subscriptionScheduleObject.scheduledDate + '"}';
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.subscriptionEndPointsUrl + '/'+subscriptionScheduleObject.id+'/schedule?';
    console.log(requestUrl);
    console.log(requestBody);
    request
      .put(requestUrl)
      .send(requestBody)
      .set('Accept','application/json')
      .set('Content-Type','application/json')
      .set('OBOAgent', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
          console.log("error");
        } else {
          deferredRequest.fulfill(res);
          console.log("success");
        }
      });
    return deferredRequest.promise;
  };
  /**
   * @ngdoc Methods
   * @name putSubscribeDefault
   * @methodOf agora
   * @description PUT /subscription/subscribe/default, This method would basically do an equivalent of
   * getDefaultProduct & subscribe product.
   * @param {object} personObject An object of array that contain data about the subscription person.<br>
   *   * Example: <br>
   <pre>
   var  subscriptionPerson = {

    forceUnSubscribe :'true',
    productId : '1',
    refId : '547851217763307521',
    refType :'ORG'
  };
   </pre>
   Here's an example of how to use this:<br>
   it('subscribe a membership', function (done) {
      agora.putSubscribeDefault(subscriptionPerson).then(function (success){
        console.log('DONE: subscribeDefault completed!');
        done();
      });
      commonsMethod.sleep20(10);
  });
   */
  this.putSubscribeDefault = function (personObject){

    var requestBody =
      '{' +
        '"forceUnSubscribe":"' + personObject.forceUnSubscribe + '",' +
        '"refId":"' + personObject.refId + '",' +
        '"refType":"' + personObject.refType + '"}';
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.subscriptionEndPointsUrl + '/subscribe/default?';
    console.log(requestUrl);
    console.log(requestBody);
    request
      .put(requestUrl)
      .send(requestBody)
      .set('Accept','application/json')
      .set('Content-Type','application/json')
      .set('OBOAgent', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
          console.log("error");
        } else {
          deferredRequest.fulfill(res);
          console.log("success");
        }
      });
    return deferredRequest.promise;
  };


  /**
   * @ngdoc Methods
   * @name postConnectsTransaction
   * @methodOf agora
   * @description use this function to do a connects transaction.
   * @param {object} transactionObject An object of array that contain data about the connects transaction.<br>
   *   * Example: <br>
   <pre>
   var  connectsTransaction = {
    amount : '70',
    reason : 'OBO',
    refId : '547851217763307521',
    refType : 'ORG',
    type : 'DEBIT'
  };
   </pre>
   Here's an example of how to use this:<br>
   it('connects transaction', function (done) {

    agora.postConnectsTransaction(connectsTransaction).then(function (success){
      console.log('DONE: connects trasaction completed.');
      done();
    });
    browser.refresh();

  });

   */
  this.postConnectsTransaction = function (transactionObject){

    var requestBody =
      '{' +
        '"amount":"' + transactionObject.amount + '",' +
        '"reason":"' + transactionObject.reason + '","refId":"' + transactionObject.refId + '",' +
        '"refType":"' + transactionObject.refType + '","type":"' + transactionObject.type + '"}';
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.connectsEndPointsUrl + '/transaction?';
    console.log(requestUrl);
    console.log(requestBody);
    request
      .post(requestUrl)
      .send(requestBody)
      .set('Accept','application/json')
      .set('Content-Type','application/json')
      .set('OBOAgent', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name postFF
   * @methodOf agora
   * @description set Feature Flag at the /_ff page
   * @param {object} requestUrl This is the URL for sending the HTTP request
   * @param {object} feature name of the feature
   * @param {object} flag the value to be set for the feature, can be either "1" or "0"
   *  <br>Example: <br>
   * it('post to FF', function(){
   *    var requestURL = "https://stage.upwork.com/_ff/switch";
        agora.postFF(requestURL, "activitiesFeature","1").then(function(res){
         console.log("[response]== "+ res.text);
    });
  });
   A successful request receives a response value: [response]== {"success":true}
   Other values indicates an error for this request.
   */
  this.postFF = function(requestUrl, feature, flag){

    var deferredRequest = protractor.promise.defer();
    var sessionId;

    console.log("request url is " + requestUrl);
    console.log("request feature is " + feature);
    console.log("request flag is " + flag);

    browser.driver.get("https://s-int.upwork.com/_ff");
    browser.sleep(5000);
    browser.manage().getCookie("staging_session_id").then(function(id){
      sessionId = id;
      console.log("sessionId == "+sessionId.value);

      request
        .post(requestUrl)
        .set('Accept','*/*')
        .type('form')
        .set('Content-Type','application/x-www-form-urlencoded')
        .set("X-Requested-With","XMLHttpRequest")
        .set("Cookie", "staging_session_id="+sessionId.value+";")
        .send('feature='+feature)
        .send('enabled='+flag)
        .end(function (err, res) {
          if (err) {
            deferredRequest.cancel(err);
          } else {
            deferredRequest.fulfill(res);
          }
        });

    });

    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name getConnectSummary
   * @methodOf agora
   * @description Get the connects Balance of your current subscription using the ref_id and ref_type
   * @param {object} personObject contains refId and refType<br>
   * Example: <br>
   <pre>
   var  personObject = {
    refId : '616692815894876161',
    refType : 'ORG'
  };
   </pre>
   Here's an example of how to use this:<br>
   it('Get information about  the connect balance of a freelancer', function (done) {
    agora.getConnectSummary(personObject).then(function (success){
      console.log('Available connects:'+ success.body.connectsBalance );
      done();
    });
   });
   */
  this.getConnectSummary  = function (personObject) {
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.connectsEndPointsUrl + '/summary?refId='+personObject.refId+'&refType='+ personObject.refType+'&';
    request
      .get(requestUrl)
      .set('Accept', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name getCurrentSubscription
   * @methodOf agora
   * @description Get the id of your current subscription using the ref_id and ref_type
   * @param {object} personObject contains refId and refType<br>
   *   * Example: <br>
   <pre>
   var  personObject = {
    refId : '616692815894876161',
    refType : 'ORG'
  };
   </pre>
   Here's an example of how to use this:<br>
   it('Get information about current subscription of a freelancer', function (done) {
    agora.getCurrentSubscription(personObject).then(function (success){
      console.log('subscription id:'+ success.body.id );
      done();
    });
   });
   */
  this.getCurrentSubscription = function (personObject) {
    var requestUrl = this.subscriptionEndPointsUrl + '/current?refId='+personObject.refId+'&refType='+personObject.refType
    if(personObject.includeNextPayment){
      requestUrl+= '&includeNextPayment='+personObject.includeNextPayment;
    }
    if(personObject.checkVat){
      requestUrl+='&checkVat='+personObject.checkVat;
    }
    var deferredRequest = protractor.promise.defer();

    request
      .get(requestUrl)
      .set('Accept', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  this.getServicefeeByAssignment  = function (contractID) {
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.pricingEndPointsUrl + '/servicefee/assignment/'+contractID;
    request
      .get(requestUrl)
      .set('Accept', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name postCurrentTrigger
   * @methodOf agora
   * @description use this function to do a connects transaction.
   * @param {object} triggerInfo An object of array that contain data about the subscription renewal batch that you planing to execute.<br>
   *   * Example: <br>
   <pre>
   var  triggerInfo = {
    executionStart : '2015-05-30',
    jobName : '1'
  };
   </pre>
   Here's an example of how to use this:<br>
   it('execute  subscription batch number 1', function (done) {
    agora.postCurrentTrigger(triggerInfo).then(function (success){
      console.log('subscription renewal batch executed');
      done();
    });
   });
   */
  this.postCurrentTrigger  = function (triggerInfo){
    var requestBody;
    if(triggerInfo.executionStart!=''){
      requestBody = '{' +
      '"executionStart":"' + triggerInfo.executionStart + '",' ;
    }else{
      requestBody = '{' ;
    }
    requestBody +=
      '"jobName":"' + triggerInfo.jobName + '"}';
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.subscriptionBatchServicesDSEndPoint;
    console.log(requestUrl);
    console.log(requestBody);
    request
      .post(requestUrl)
      .send(requestBody)
      .set('Accept','application/json')
      .set('Content-Type','application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name postPromotions
   * @methodOf agora
   * @description This will create a promo code. This is for advance user using json body.
   * @param {json} promotionRequestObject Use json data to create a promotion code.


   var promotionRequestObject = {
    code : "mnypromo013",
    description : "money test",
    duration : "0",
    expiryDate : "2015-05-05",
    maxQuantity : "1000",
    message : "message",
    perReceiverMaxQuantity : "0",
    productIds : ["2"],
    productIdsSize : "2",
    style : "IMMEDIATE",//DURATION_BY_TIME//DURATION_BY_QTY//STAGED
    type : "DISCOUNT_RATE",//CREDIT_AMOUNT
    value : "1.0"
  };
   */
  this.postPromotions = function (promotionRequestObject){
    var requestBody =
      '{' +
        '"code":"' + promotionRequestObject.code + '",' +
        '"description":"' + promotionRequestObject.description + '","duration":"' + promotionRequestObject.duration + '",' ;
    if(promotionRequestObject.expiryDate!=""){requestBody+= '"expiryDate":"' + promotionRequestObject.expiryDate+'",'}
    requestBody+='"maxQuantity":"' + promotionRequestObject.maxQuantity + '",' +
      '"message":"' + promotionRequestObject.message + '","perReceiverMaxQuantity":"' + promotionRequestObject.perReceiverMaxQuantity + '",' +
      '"productIds":'+ promotionRequestObject.productIds+','+
      '"productIdsSize":"' + promotionRequestObject.productIdsSize + '","style":"' + promotionRequestObject.style + '",' +
      '"type":"' + promotionRequestObject.type + '","value":"' + promotionRequestObject.value + '"}';
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.promotionsEndPointsUrl + '/promotions?';
    console.log(requestUrl);
    console.log(requestBody);
    request
      .post(requestUrl)
      .send(requestBody)
      .set('Accept','application/json')
      .set('Content-Type','application/json')
      .set('OBOAgent', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name getPersonContact
   * @methodOf agora
   * @description Get a persons's full detail by using his email
   * @param {string} email A string of the email <br>
   */
  this.getPersonContact = function (email) {
    var deferredRequest = protractor.promise.defer();
    var requestUrl = this.contactEndPointsUrl + '?email=' + email;
    request
      .get(requestUrl)
      .set('Accept', 'application/json')
      .end(function (err, res) {
        if (err) {
          deferredRequest.cancel(err);
        } else {
          deferredRequest.fulfill(res);
        }
      });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name sendHttpRequest
   * @methodOf agora
   * @param {string} type  type of http request (POST/GET/PUT)
   * @param {string} requestUrl   the url from env.data
   * @param {string} requestBody   the request body
   * @returns {string} promise
   */

  this.sendHttpRequest = function(type, requestUrl, requestBody){
    var defer = protractor.promise.defer();
    if(type.toString().toLowerCase() == 'post'){
      console.log("http-post");
      console.log(requestUrl);
      console.log(requestBody);

      request
        .post(requestUrl)
        .send(requestBody)
        .set('Accept', 'application/json')
        .end(function (error, response) {
          if (error) {
//              console.error(error);
            defer.cancel(error);
          } else {
            defer.fulfill(response);
          }
        });
    }else if(type.toString().toLowerCase() == 'get'){
      console.log("http-get");
      console.log(requestUrl);
      request
        .get(requestUrl)
        .set('Accept', 'application/json')
        .end(function (error, response) {
          if (error) {
            console.error(error);
            defer.cancel(error);
          } else {
            defer.fulfill(response);
          }
        });
    }else if(type.toString().toLowerCase() == 'put'){
      console.log("http-put");
      request
        .put(requestUrl)
        .set('Accept','application/json')
        .set('Content-Type','application/json')
        .set('OBOAgent', 'application/json')
        .end(function (error, response) {
          if (error) {
            console.error(error);
            defer.cancel(error);
          } else {
            defer.fulfill(response);
          }
        });
    }
    return defer.promise;
  };

    /**
     * @ngdoc Methods
     * @name getAgoraSkill
     * @methodOf agora
     * @description return Agora skill data
     * @param {string} skill value
     * @author Alex Arapu
     */
    this.getAgoraSkill = function (skill) {
        var deferredRequest = protractor.promise.defer();
        request
            .get(env.data.agora.skills + '?filter=' + skill)
            .set('Accept', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                    deferredRequest.cancel(err);
                } else {
                    var values_array = [];
                    for (var i = 0; i < JSON.parse(res.text).skills.length; i++) {
                        if (JSON.parse(res.text).skills[i].skill){
                            values_array.push(JSON.parse(res.text).skills[i].skill);
                        }
                    }
                    deferredRequest.fulfill(values_array);
                }
            });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getAgoraCategories
     * @methodOf agora
     * @description {object} array of all categories & subcategories
     * @author Alex Arapu
     */
    this.getAgoraCategories = function () {
        var deferredRequest = protractor.promise.defer();
        request
            .get(env.data.agora.category)
            .set('Accept', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                    deferredRequest.cancel(err);
                } else {
                    deferredRequest.fulfill(JSON.parse(res.text).groups);
                }
            });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getRandomCategorySubcategory
     * @methodOf agora
     * @description {object} array of random category & subcategory
     * @author Alex Arapu
     */
    this.getRandomCategorySubcategory = function () {
        return that.getAgoraCategories().then(function(categories) {
            var rand_categ = Math.floor(Math.random()*categories.length);
            var category = categories[rand_categ];
            var subcategory = category.categories[Math.floor(Math.random() * category.categories.length)]['name'];
            return [category['name'], subcategory];
        });
    };

    /**
     * @ngdoc Methods
     * @name getRandomCategory
     * @methodOf agora
     * @description get random jobs category
     * @returns {string} jobs category name
     * @author Alex Arapu
     */
    this.getRandomCategory = function () {
        return that.getAgoraCategories().then(function (value) {
            return value.sample().name;
        });
    };

    /**
     * @ngdoc Methods
     * @name getSubcategoriesByCategory
     * @methodOf agora
     * @description get a list of jobs subcategory by given category
     * @param {string} category name
     * @returns {object} all subcategories by given category
     * @author Alex Arapu
     */
    this.getSubcategoriesByCategory = function (category) {
        return that.getAgoraCategories().then(function (value) {
            var categ;
            for (var i=0 ; i<value.length ; i++){
                if (category == value[i].name) {
                    categ = value[i];
                    break;
                }
            }
            return categ.categories;
        });
    };

    /**
     * @ngdoc Methods
     * @name getRandomSubcategory
     * @methodOf agora
     * @description get random subcategory by given category
     * @param {string} category name
     * @returns {string} subcategory name
     * @author Alex Arapu
     */
    this.getRandomSubcategory = function (category) {
        return that.getAgoraCategories().then(function (value) {
            for (var i=0 ; i<value.length ; i++){
                if (category == value[i].name) {
                    var categ = value[i].name;
                }
            }
            return categ.categories.sample().name;
        });
    };

    /**
     * @ngdoc Methods
     * @name getEventLoggings
     * @methodOf agora
     * @description returns searched event
     * @param {string} user id
     * @param {string} type click, change
     * @param {string} url from current page
     * @param {string} param to get exact searched event
     * @author Alex Arapu
     */
    this.getEventLoggings = function (user, type, url, param) {
        var deferredRequest = protractor.promise.defer();
        var date = 0;
        //Time.now.utc.strftime('%Y.%m.%d')
        //currentTime = new Date(new Date().toDateString()).getTime(),
        //freelancerTime = new Date(expected).getTime()
        request
            .get(env.data.agora.logs + "logstash-" + date + "/_search" + param)
            .set('Content-Type', 'application/json')
            //.set('Accept', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                    deferredRequest.cancel(err);
                } else {
                    var q = new RegExp('.*' + user + '.*' + type + '.*_search.*' + param + '.*' + url.replace(/\//g,'\\/').replace(/\?/g,'\\?').replace(/&/g,'&amp;').replace(/\)/g,'\\)').replace(/\(/g,'\\(') + '.*', "g");
                    var event = res.text.match(q);
                    if (event){
                        deferredRequest.fulfill(event[event.length - 1]);
                    } else {
                        console.warn('Warning - no event found for: user='+user+', type='+type+', param='+param+', event='+event+', url='+url);
                    }
                }
            });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getSearchFreelancersAgoraData
     * @methodOf agora
     * @description returns freelancers from Vega
     * @param {string} keyword in search query
     * @param {string} param from agora response
     * @param {string} index or position in results
     * @param {string} page number
     * @author Alex Arapu
     */
    this.getSearchFreelancersAgoraData = function (keyword, param, index, page) {
        var deferredRequest = protractor.promise.defer();
        if (!page) {page = 1;}
        browser.driver.executeScript("return Applet.getUser()").then(function (user) {
            if (user) {
                that.getUserType().then(function(type) {
                    var user_type = type == 'buyer' ? 'Client' : (type == 'provider' ? 'Freelancer' : 'Freelancer');
                    request
                        .get(env.data.agora.profile + '/auth/profiles' + "?q=" + keyword + "&paging=" + (10 * page - 10) + ";" + 10)
                        .set('Accept', 'application/json')
                        .set('Authorization', 'session 6fe97a4900e19a7fca5ae7afc44bec5f')
                        .set('X-LOCATION', 'user_profile_search')
                        .set('X-USER-TYPE', user_type)
                        .set('X-USER', user_type == 'Client' ? that.getEnvData().user.em : that.getEnvData().user.ic)
                        .end(function (err, res) {
                            if (err) {
                                console.error(err);
                                deferredRequest.cancel(err);
                            } else {
                                deferredRequest.fulfill(JSON.parse(res.text).results.profiles[index][param]);
                            }
                        });
                });
            } else {
                browser.driver.executeScript("return Applet.getVisitorId()").then(function (visitorId) {
                    request
                        .get(env.data.agora.profile + '/pub/profiles' + "?q=" + keyword + "&paging=" + (10 * page - 10) + ";" + 10)
                        .set('Accept', 'application/json')
                        .set('Authorization', 'session 6fe97a4900e19a7fca5ae7afc44bec5f')
                        .set('X-LOCATION', 'visitor_profile_search')
                        .set('vnd.eo.visitorId', visitorId)
                        .end(function (err, res) {
                            if (err) {
                                console.error(err);
                                deferredRequest.cancel(err);
                            } else {
                                deferredRequest.fulfill(JSON.parse(res.text).results.profiles[index][param]);
                            }
                        });
                });
            }
        });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getAllSearchFreelancersAgoraData
     * @methodOf agora
     * @description returns freelancers from Vega
     * @param {string} keyword in search query
     * @param {string} page used in agora request
     * @author Alex Arapu
     */
    this.getAllSearchFreelancersAgoraData = function (keyword, page) {
        var deferredRequest = protractor.promise.defer();
        if (!page) {page = 1;}
        browser.driver.executeScript("return Applet.getUser()").then(function (user) {
            if (user) {
                that.getUserType().then(function(type) {
                    var user_type = type == 'buyer' ? 'Client' : (type == 'provider' ? 'Freelancer' : 'Freelancer');
                    request
                        .get(env.data.agora.profile + '/auth/profiles' + "?q=" + keyword + "&paging=" + (10 * page - 10) + ";" + 10)
                        .set('Accept', 'application/json')
                        .set('Authorization', 'session 6fe97a4900e19a7fca5ae7afc44bec5f')
                        .set('X-LOCATION', 'user_profile_search')
                        .set('X-USER-TYPE', user_type)
                        .set('X-USER', user_type == 'Client' ? that.getEnvData().user.em : that.getEnvData().user.ic)
                        .end(function (err, res) {
                            if (err) {
                                console.error(err);
                                deferredRequest.cancel(err);
                            } else {
                                deferredRequest.fulfill(JSON.parse(res.text).results.profiles);
                            }
                        });
                });
            } else {
                browser.driver.executeScript("return Applet.getVisitorId()").then(function (visitorId) {
                    request
                        .get(env.data.agora.profile + '/pub/profiles' + "?q=" + keyword + "&paging=" + (10 * page - 10) + ";" + 10)
                        .set('Accept', 'application/json')
                        .set('Authorization', 'session 6fe97a4900e19a7fca5ae7afc44bec5f')
                        .set('X-LOCATION', 'visitor_profile_search')
                        .set('vnd.eo.visitorId', visitorId)
                        .end(function (err, res) {
                            if (err) {
                                console.error(err);
                                deferredRequest.cancel(err);
                            } else {
                                deferredRequest.fulfill(JSON.parse(res.text).results.profiles);
                            }
                        });
                });
            }
        });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getAllAgoraSkills
     * @methodOf agora
     * @description returns all skills data
     * @author Alex Arapu
     */
    this.getAllAgoraSkills = function () {
        var deferredRequest = protractor.promise.defer();
        request
            .get(env.data.agora.skills)
            .set('Accept', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                    deferredRequest.cancel(err);
                } else {
                    deferredRequest.fulfill(JSON.parse(res.text).skills);
                }
            });
        return deferredRequest.promise;
    };

};
module.exports = agora;
