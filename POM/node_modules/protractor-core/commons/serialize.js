/**
 * @ngdoc object
 * @name serialize
 * @description
 * 	Serialize request string <br>
 *  See {@link http://visionmedia.github.io/superagent/} SuperAgent HTTP Request
 */

var serialize = function(){
  'use strict';
  var that = this;


  /**
   * @ngdoc Method
   * @name serialize
   * @methodOf serialize
   * @description
   * 	 Method that handles serialization with input of JSON object <br>
   *   reference: http://phpjs.org/functions/serialize/
   *
   *  Usage:
   *
   * 	 var str = serialize([null,'Profile::GetKeyByUserId',null,'eom2206free1']);
   * 	 console.log(str);  // a:4:{i:0;N;i:1;s:23:"Profile::GetKeyByUserId";i:2;N;i:3;s:12:"eom2206free1";}
   *
   * 	example #1:
   * 	JSON object: [null,"Engage::CreateOpeningFacade",{"RPC_LOGIN":"eom2078client"},"1930667",{"is_cover_letter_required":1,"oDeskTeamCompanyID":"_uus4cs8gczj7jkqxlif-g","Rollup Company (ref) (snap)":1930667,"Status":"Requested","Company (ref)":1930667,"JobType":"Hourly","nbr_freelancers_to_hire":5,"Opening Title":"Test Job Hourly 201508-03213002","Job Description":"QA automation description 201508-03213002","JobProfileAccessOverride":"public","Related JobCategory":19},"eom2078client","Hourly"]
   * 	result: a:7:{i:0;N;i:1;s:27:"Engage::CreateOpeningFacade";i:2;a:1:{s:9:"RPC_LOGIN";s:13:"eom2078client";}i:3;s:7:"1930667";i:4;a:11:{s:24:"is_cover_letter_required";i:1;s:18:"oDeskTeamCompanyID";s:22:"_uus4cs8gczj7jkqxlif-g";s:27:"Rollup Company (ref) (snap)";i:1930667;s:6:"Status";s:9:"Requested";s:13:"Company (ref)";i:1930667;s:7:"JobType";s:6:"Hourly";s:23:"nbr_freelancers_to_hire";i:5;s:13:"Opening Title";s:31:"Test Job Hourly 201508-03213002";s:15:"Job Description";s:41:"QA automation description 201508-03213002";s:24:"JobProfileAccessOverride";s:6:"public";s:19:"Related JobCategory";i:19;}i:5;s:13:"eom2078client";i:6;s:6:"Hourly";}
   *
   *  example #2:
   *  JSON object: [null,"Profile::GetKeyByUserId",null,"eom2206free1"]
   *  result: a:4:{i:0;N;i:1;s:23:"Profile::GetKeyByUserId";i:2;N;i:3;s:12:"eom2206free1";}
   */

  this.serialize = function(mixed_value) {
    var val, key, okey,
      ktype = '',
      vals = '',
      count = 0,
      _utf8Size = function(str) {
        var size = 0,
          i = 0,
          l = str.length,
          code = '';
        for (i = 0; i < l; i++) {
          code = str.charCodeAt(i);
          if (code < 0x0080) {
            size += 1;
          } else if (code < 0x0800) {
            size += 2;
          } else {
            size += 3;
          }
        }
        return size;
      };
    var _getType = function(inp) {
      var match, key, cons, types, type = typeof inp;

      if (type === 'object' && !inp) {
        return 'null';
      }
      if (type === 'object') {
        if (!inp.constructor) {
          return 'object';
        }
        cons = inp.constructor.toString();
        match = cons.match(/(\w+)\(/);
        if (match) {
          cons = match[1].toLowerCase();
        }
        types = ['boolean', 'number', 'string', 'array'];
        for (key in types) {
          if (cons == types[key]) {
            type = types[key];
            break;
          }
        }
      }
      return type;
    };
    var type = _getType(mixed_value);

    switch (type) {
      case 'function':
        val = '';
        break;
      case 'boolean':
        val = 'b:' + (mixed_value ? '1' : '0');
        break;
      case 'number':
        val = (Math.round(mixed_value) == mixed_value ? 'i' : 'd') + ':' + mixed_value;
        break;
      case 'string':
        val = 's:' + _utf8Size(mixed_value) + ':"' + mixed_value + '"';
        break;
      case 'array':
      case 'object':
        val = 'a';
        /*
         if (type === 'object') {
         var objname = mixed_value.constructor.toString().match(/(\w+)\(\)/);
         if (objname == undefined) {
         return;
         }
         objname[1] = this.serialize(objname[1]);
         val = 'O' + objname[1].substring(1, objname[1].length - 1);
         }
         */

        for (key in mixed_value) {
          if (mixed_value.hasOwnProperty(key)) {
            ktype = _getType(mixed_value[key]);
            if (ktype === 'function') {
              continue;
            }

            okey = (key.match(/^[0-9]+$/) ? parseInt(key, 10) : key);
            vals += this.serialize(okey) + this.serialize(mixed_value[key]);
            count++;
          }
        }
        val += ':' + count + ':{' + vals + '}';
        break;
      case 'undefined':
      // Fall-through
      default:
        // if the JS object has a property which contains a null value, the string cannot be unserialized
        val = 'N';
        break;
    }
    if (type !== 'object' && type !== 'array') {
      val += ';';
    }
    return val;
  };
};

module.exports = serialize;