/**
 * @ngdoc object
 * @name commons
 * @description
 * 	 Commons method.  <br>
 *
 */

var request = require('superagent');
var envConf = require('../conf/env_conf.js'), env = new envConf();

/**
 * @ngdoc Methods
 * @author Alex Arapu
 * @name sample
 * @methodOf commons
 * @description return random value from array
 * @return {string|object|int} random value from array
 */
Array.prototype.sample = function() {
  return this[~~(Math.random() * this.length)];
};

var commons = function (brw) {
  'use strict';
  var that = this;
  if(brw){
    that.browser = brw;
  }
  var configParams = browser.params; //This is from base_config and localhost_conf


  /******************************************************
   * Common Page Object Methods
   ******************************************************/


  /**
   * @ngdoc method
   * @name createUser
   * @methodOf commons
   * @description api to quickly create a user for testing: client/app/components/common/auth-service.js
   *
   * @param {string} username username for account creation
   * @param {string} firstname first name
   * @param {string} lastname last name
   * @param {string} email email of user
   * @param {number} countrycode code number use for identifying country.
   */
  this.createUser = function (browser, username, firstname, lastname, email, countrycode) {
    console.log(' ---- ' + username);
    browser.sleep(3000);
    browser.executeAsyncScript(function (username, firstname, lastname, email, countrycode, callback) {
      //This is inside windows.  It need to pass in the function and variable as a string into the scoope.
      $(window).ready(function () {
        var eoAuth = angular.element(jQuery('body')).injector().get('eoAuth');
        eoAuth.register(username, firstname, lastname, email, countrycode).then(function (data) {
          callback(data);
        });
      });
    }, username, firstname, lastname, email, countrycode).then(function (result) {
      //each params need to be its own variables instead of an array
      console.log(result);
    });
  }; //Default Password is Changeme@1!


  /**
   * @ngdoc method
   * @name getRandomNumber
   * @methodOf commons
   * @description return a random number.
   *
   * @returns {number} return a random number
   *
   */
  this.getRandomNumber = function () {
    var randomNumber = Math.floor(Math.random() * 10000);
    return randomNumber;
  };

  /**
   * @ngdoc method
   * @name getTimestamp
   * @methodOf commons
   * @returns {string} timestamp
   * @description return a formatted ISO time stamp (removed :, T, Z)
   * The original ISO format : YYYY-MM-DDTHH:MM:SS.sssZ -- new format: YYYYMM-DDHHMMSS
   */
  this.getTimestamp = function(){
    return new Date().toISOString()
        .replace(/-/, '')
        .replace(/T/, '')
        .replace(/:/, '')
        .replace(/:/, '')
        .replace(/\./,'')
        .replace(/...Z/, '');
  };


  /**
   * @ngdoc method
   * @name findElement
   * @methodOf commons
   * @description Find an element by path and return a promise.  Need to let this method know if it is async or non async. By default, we'll assume it is always waiting for angular.
   *
   * @param {path} elementPath Must use path to element like by.css() or by.xpath() or by.model().  Don't pass in the actual element.
   * @param {boolean} doNotScrollIntoView true/false
   * @param {boolean} waitForAngular Boolean of true or false on if it is expecting a wait for angular or not. Default is false for non async
   * @return {element} return the actual element; no need to get the full element anymomre.
   */
  this.findElement = function (elementPath, doNotScrollIntoView, browsers/*, waitForAngular*/) {
    if (browsers === undefined) {
      var waitForAngular = configParams.waitForAngular.angularFlag;
      if (true === waitForAngular) {

        try{
          var promise = element(elementPath).getWebElement().then(function(elementFound) {
            //browser.driver.actions().mouseMove(elementFound).perform();
            if (!doNotScrollIntoView) {
              browser.executeScript('arguments[0].scrollIntoView()', elementFound);
            }
            return elementFound;          //return the element itself once found
          });
          return promise;
        }
        catch(err) {      //Make sure we warn developer that client side is timing out if our test started failing.
          console.log('Timeouts can be caused by AngularJS services $http and $timeout which fail to complete quick enough.' + err);
        }
      } else {  //Only use this if timeout polling fail -- FALLBACK
        return browser.driver.wait(function () {
          browser.driver.sleep(configParams.waitForAngular.angularDelay);  //without angular knowing how long it will take, this will help allow the page to finish loading
          return browser.driver.isElementPresent(elementPath).then(function(){ //wait until a certain element is present
            var elementFound = browser.driver.findElement(elementPath);
            return elementFound;
          });
        }, configParams.globalTimeout);
      }
    } else {
      var waitForAngular = configParams.waitForAngular.angularFlag;
      if (true === waitForAngular) {

        try{
          var promise = element(elementPath).getWebElement().then(function(elementFound) {
            //browser.driver.actions().mouseMove(elementFound).perform();
            if (!doNotScrollIntoView) {
              browsers.executeScript('arguments[0].scrollIntoView()', elementFound);
            }
            return elementFound;          //return the element itself once found
          });
          return promise;
        }
        catch(err) {      //Make sure we warn developer that client side is timing out if our test started failing.
          console.log('Timeouts can be caused by AngularJS services $http and $timeout which fail to complete quick enough.' + err);
        }
      } else {  //Only use this if timeout polling fail -- FALLBACK
        return browsers.driver.wait(function () {
          browsers.driver.sleep(configParams.waitForAngular.angularDelay);  //without angular knowing how long it will take, this will help allow the page to finish loading
          return browsers.driver.isElementPresent(elementPath).then(function(){ //wait until a certain element is present
            var elementFound = browsers.driver.findElement(elementPath);
            return elementFound;
          });
        }, configParams.globalTimeout);
      }
    }
  };


  /**
   * @ngdoc method
   * @name findElementDriver
   * @methodOf commons
   * @description Using the browser driver to findElement.  This is used for normal website.
   *
   * @param {path} elementPath Must use path to element like by.css() or by.xpath() or by.model().  Don't pass in the actual element.
   * @return {element} return the actual element; no need to get the full element anymomre.
   */
  this.findElementDriver = function (elementPath, browsers) {
    if (browsers === undefined) {
      return browser.driver.wait(function () {
        browser.driver.sleep(configParams.waitForAngular.angularDelay);  //without angular knowing how long it will take, this will help allow the page to finish loading
        return browser.driver.isElementPresent(elementPath).then(function(){ //wait until a certain element is present
          var elementFound = browser.driver.findElement(elementPath);
          return elementFound;
        });
      }, configParams.globalTimeout);
    } else {
      return browsers.driver.wait(function () {
        browsers.driver.sleep(configParams.waitForAngular.angularDelay);  //without angular knowing how long it will take, this will help allow the page to finish loading
        return browsers.driver.isElementPresent(elementPath).then(function(){ //wait until a certain element is present
          var elementFound = browsers.driver.findElement(elementPath);
          return elementFound;
        });
      }, configParams.globalTimeout);
    }

  };


  /**
   * @ngdoc method
   * @name getUrl
   * @methodOf commons
   * @description Open up specify page and verify url.
   *
   * @param {link} url the url of page
   *
   */
  this.getUrl = function (pageUrl) {
    browser.get(pageUrl);
    /*browser.getCurrentUrl().then(function(url){
      expect(url).toEqual(browser.baseUrl + pageUrl);
      console.log('Opening url: ' + pageUrl);
    });*/
  };

  /**
   * @ngdoc method
   * @name getUrlAnyPage
   * @methodOf commons
   * @description Open up specific angularjs page and verify url.
   *
   *
   */
  this.getUrlAnyPage = function (url) {
    browser.get(url).then(function(){
      console.log('Opening url: ' + url);
    });
  };

  /**
   * @ngdoc method
   * @name getUrlAnyPageDriver
   * @methodOf commons
   * @description Open up specific nonangularjs page and verify url.
   *
   *
   */
  this.getUrlAnyPageDriver = function (url) {
    browser.driver.get(url).then(function(){
      console.log('Opening url: ' + url);
    });
  };

  /**
   * @ngdoc Methods
   * @author Alex Arapu
   * @name getUrlText
   * @methodOf commons
   * @description get current page url text
   * @return {string} current url
   */
  this.getUrlText = function () {
    return browser.driver.getCurrentUrl();
  };

  /**
   * @ngdoc Methods
   * @author Alex Arapu
   * @name replaceSpecialChars
   * @methodOf commons
   * @description returns string without or encoded special chars
   * @return {string} new_text contains replaced chars
   * @param {string} text to be processed
   * @param {string} param can be 'encode'or 'replace'
   */
  this.replaceSpecialChars = function (text, param) {
    if (param == 'encode') {
      var new_text = text.replace(/ /g, '%20').replace(/@/g, '%40').replace(/\'/g, '%27').replace(/#/g, '%23')
          .replace(/\$/g, '%24').replace(/\//g, '%2F').replace(/\|/g, '%7C').replace(/&/g, '%26').replace(/\+/g, '%2B')
          .replace(/\{/g, '%7B').replace(/\}/g, '%7D').replace(/</g,'%3C').replace(/>/g,'%3E').replace(/;/g,'%3B').replace(/=/g,'%3D');
    }
    if (param == 'replace') {
      var new_text = text.replace(/@| |.|#|\||\/|&|!|\'|,/g, ' ');
    }
    return new_text;
  };

  /**
   * @ngdoc method
   * @name clickKeyboardKey
   * @methodOf commons
   * @description Click a keyboard key.
   *
   * @param {string} key Keyboard key that is supported: ENTER, ESCAPE
   *
   */
  this.clickKeyboardKey = function (key) {
    switch (key) {
      case 'ENTER':
        browser.driver.actions().sendKeys(protractor.Key.ENTER).perform();
        break;
      case 'ESCAPE':
        browser.driver.actions().sendKeys(protractor.Key.ESCAPE).perform();
        break;
      default:
        browser.driver.actions().sendKeys(key).perform();
    }
  };

  /**
   * @ngdoc method
   * @name holdKeyboardKey
   * @methodOf commons
   * @description Press and hold the key. Use releaseKeyboardKey(key) to release the key
   *
   * @param {string} key Keyboard key that is supported: ALT, CONTROL, SHIFT, etc.
   *
   */
  this.holdKeyboardKey = function (key) {
    switch(key){
      case 'ALT':
        browser.driver.actions().keyDown(protractor.Key.ALT).perform();
        break;
      case 'CONTROL':
        browser.driver.actions().keyDown(protractor.Key.CONTROL).perform();
        break;
      case 'SHIFT':
        browser.driver.actions().keyDown(protractor.Key.SHIFT).perform();
        break;
    }
  };

  /**
   * @ngdoc method
   * @name releaseKeyboardKey
   * @methodOf commons
   * @description Release the key from holding by holdKeyboardkey(key)
   *
   * @param {string} key Keyboard key that is supported: ALT, CONTROL, SHIFT, etc
   *
   */
  this.releaseKeyboardKey = function (key){
    switch(key){
      case 'ALT':
        browser.driver.actions().keyUp(protractor.Key.ALT).perform();
        break;
      case 'CONTROL':
        browser.driver.actions().keyUp(protractor.Key.CONTROL).perform();
        break;
      case 'SHIFT':
        browser.driver.actions().keyUp(protractor.Key.SHIFT).perform();
        break;
    }
  };

  /**
   * @ngdoc method
   * @name sleep20
   * @methodOf commons
   * @description Force the browser to sleep in session of 20 sec each time.
   *
   * @param {number} seconds In seconds of how long you want to sleep.
   *
   */
  this.sleep20 = function (seconds) {
    var delay = seconds;
    while (delay > 20) {
      browser.sleep(20000);
      delay = delay - 20;
    }
    browser.sleep(delay * 1000);
  };

  /**
   * @ngdoc method
   * @name mouseOverWebElement
   * @methodOf commons
   * @description perform mouse over action on the web element
   * @param {string} elementPath Path of the element
   * @param {boolean} doNotScrollIntoView true/false
   */
  this.mouseOverWebElement = function(elementPath, doNotScrollIntoView){
    that.findElement(elementPath, doNotScrollIntoView).then(function(foundElement){
      browser.driver.actions().mouseMove(foundElement).perform();
    });
  };

  /**
   * @ngdoc method
   * @name scrollElemFinderIntoView
   * @methodOf commons
   * @description Scroll to element
   * @param {string} elementPath Path of the element
   */
  this.scrollElemFinderIntoView = function(elementPath) {
    var scrollIntoView = function () {
      arguments[0].scrollIntoView();
    };
    var elem = browser.findElement(elementPath);
    browser.executeScript(scrollIntoView, elem);
  };

  /**
   * @ngdoc method
   * @name scrollElementIntoView
   * @methodOf commons
   * @description Scroll to element
   * @param {string} webElement element object from getWebElement()
   */
  this.scrollElementIntoView = function(webElement) {
    var scrollIntoView = function(){
      arguments[0].scrollIntoView();
    };
    browser.executeScript(scrollIntoView, webElement);
  };

  /**
   * @ngdoc method
   * @name fluentWaitForElement
   * @methodOf commons
   * @description a wait function similar to webdriver fluent wait
   *         to provide flexible wait on web element
   * @param {string} elementPath  element locator to check
   * @param {string} recursive  an optional recursive count for wait, default is 4
   */
  this.fluentWaitForElement = function(elementPath, recursive){
    if(recursive == null) {recursive = 4;}
    if(recursive == 0) {
      console.log("cannot receive element within time limit");
      return;
    }
    element.all(elementPath).count().then(function(count){

      if(count == 0){
        console.log("wait recursively...." + recursive);
        console.log("Element not found, wait for "+(configParams.globalTimeout/6000)+" seconds ...");
        browser.sleep(configParams.globalTimeout/6);
        browser.driver.navigate().refresh();
        that.fluentWaitForElement(elementPath, recursive-1);
      }else{
        console.log("Element is found...");
      }
    })
  };

  /**
   * @ngdoc Methods
   * @name checkTestEnvironmentProfile
   * @methodOf commons
   * @methodOf commons
   * @description return the value of testing environment (envConfig)
   */
  this.checkTestEnvironmentProfile = function(){
    console.log("Test environment data set: ["+ env.data.envConfig +"]");
  };

  /**
   * @ngdoc Methods
   * @name getProfileOdrData
   * @methodOf commons
   * @description returns profile data from  ODR
   * @param {string} key cipherkey
   * @param {string} param from ODR response
   * @author Alex Arapu
   */
  this.getProfileOdrData = function (key, param) {
    var deferredRequest = protractor.promise.defer();
    request
        .get(env.data.odr.profile + key + '.json')
        .set('Content-Type', 'application/json')
        .end(function (err, res) {
          if (err) {
            console.error(err);
            deferredRequest.cancel(err);
          } else {
            deferredRequest.fulfill(JSON.parse(res.text)[param]);
          }
        });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name getOdsSkills
   * @methodOf commons
   * @description returns ODS all skills data
   * @author Alex Arapu
   */
  this.getOdsSkills = function(){
    var deferredRequest = protractor.promise.defer();
    request
        .get(env.data.ods.skills + '.json')
        .set('Content-Type', 'application/json')
        .end(function (err, res) {
          if (err) {
            console.error(err);
            deferredRequest.cancel(err);
          } else {
            deferredRequest.fulfill(JSON.parse(res.text).result);
          }
        });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @author Alex Arapu
   * @name getRandomSkill
   * @methodOf commons
   * @description get Random Skill
   * @return {object} random skill promise
   */
  this.getRandomSkill = function (){
    return that.getOdsSkills().then(function (value) {
      return value.sample().skill;
    });
  };

  /**
   * @ngdoc Methods
   * @name getRandomString
   * @methodOf commons
   * @description Generate a random string
   * @param {int} len length of string
   * @param {String} charSet random set of characters
   * @author Mayank Purohit
   */
  this.getRandomString = function (len, charSet) {
    charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
    var randomString = '';
    for (var i = 0; i < len; i++) {
      var randomPoz = Math.floor(Math.random() * charSet.length);
      randomString += charSet.substring(randomPoz,randomPoz+1);
    }
    return randomString;
  };

  /**
   * @ngdoc Methods
   * @name getCurrentTime
   * @methodOf commons
   * @description Return current timestamp in hh:mm AM/PM format
   * @author Mayank Purohit
   */
  this.getCurrentTime = function(){
    var now = new Date();
    var currentTime;
    currentTime = (now.getHours()<12) ? now.getHours() : Math.abs(now.getHours()-12);
    currentTime = currentTime + ":" +now.getMinutes();
    currentTime = currentTime + " " + ((now.getHours()<12)? "AM" : "PM");
    return currentTime;
  };

  /**
   * @ngdoc Methods
   * @name setInputTextElementDriver
   * @methodOf commons
   * @param {object} element on that page
   * @param {string} text to be entered
   * @description Set the string to be passed into input box for a non-angular page
   * @author Alex Arapu
   */
  this.setInputTextElementDriver = function (element, text) {
    return that.findElementDriver(element).then(function(foundElement){
      foundElement.clear();
      foundElement.sendKeys(text);
      console.log("Entered text "+ text);
    });
  };

  /**
   * @ngdoc Methods
   * @name setInputTextElement
   * @methodOf commons
   * @param {object} element on that page
   * @param {string} text to be entered
   * @description Set the string to be passed into input box for an angular page
   * @author Alex Arapu
   */
  this.setInputTextElement = function (element, text) {
    return that.findElement(element).then(function(foundElement){
      foundElement.clear();
      foundElement.sendKeys(text);
      console.log("Entered text "+ text);
    });
  };

  /**
   * @ngdoc Methods
   * @name clickElementDriver
   * @methodOf commons
   * @description Click the element in a non-angular page
   * @param {object} element on that page
   * @author Alex Arapu
   */
  this.clickElementDriver = function (element) {
    return that.findElementDriver(element).then(function(foundElement){
      foundElement.click();
      console.log("Click on element");
    });
  };

  /**
   * @ngdoc Methods
   * @name clickElement
   * @methodOf commons
   * @description Click the element in an angular page
   * @param {object} element on that page
   * @param {boolean} doNotScrollIntoView true/false
   * @author Alex Arapu
   */
  this.clickElement = function (element, doNotScrollIntoView) {
    return that.findElement(element, doNotScrollIntoView).then(function(foundElement){
      foundElement.click();
      console.log("Click on element");
    });
  };

  /**
   * @ngdoc Methods
   * @name isElementPresent
   * @methodOf commons
   * @description check if element is displayed
   * @param {object} elm on the page
   * @author Alex Arapu
   */
  this.isElementPresent = function (elm) {
    return element(elm).isPresent().then(function (value) {
      return value
    });
  };

  /**
   * @ngdoc Methods
   * @name isElementPresent
   * @methodOf commons
   * @description Verify if element is displayed
   * @param {object} element on that page
   * @param {boolean} status true/false
   * @param {boolean} doNotScrollIntoView true/false
   * @author Alex Arapu
   */
  this.isElementDisplayed = function (element, status, doNotScrollIntoView) {
    return that.findElement(element, doNotScrollIntoView).then(function(foundElement){
      expect(foundElement.isDisplayed()).toBe(status);
    });
  };

  /**
   * @ngdoc Methods
   * @name isElementPresentDriver
   * @methodOf commons
   * @description Verify if element is displayed
   * @param {object} element on that page
   * @param {boolean} status true/false
   * @author Mayank Purohit
   */
  this.isElementDisplayedDriver = function (element, status) {
    that.findElementDriver(element).then(function(foundElement){
      expect(foundElement.isDisplayed()).toBe(status);
    });
  };

  /**
   * @ngdoc Methods
   * @name isElementEnabled
   * @methodOf commons
   * @description Verify if element is enabled
   * @param {object} element on that page
   * @param {boolean} status true/false
   * @author Mayank Purohit
   */
  this.isElementEnabled = function (element, status) {
    that.findElement(element).then(function(foundElement){
      expect(foundElement.isEnabled()).toBe(status);
    });
  };

  /**
   * @ngdoc Methods
   * @name isElementPresentDriver
   * @methodOf commons
   * @description Verify if element is enabled
   * @param {object} element on that page
   * @param {boolean} status true/false
   * @author Mayank Purohit
   */
  this.isElementEnabledDriver = function (element, status) {
    that.findElementDriver(element).then(function(foundElement){
      expect(foundElement.isEnabled()).toBe(status);
    });
  };


  /**
   * @ngdoc Methods
   * @name checkAlertText
   * @methodOf commons
   * @description Check alert text
   * @param {String} value Text that is to be checked
   * @author Mayank Purohit
   */
  this.checkAlertText = function(value){
    browser.sleep(4000);
    browser.switchTo().alert().then(function(text){
      text.getText().then(function(txt) {
        browser.sleep(2000);
        console.log(txt);
        expect(txt == value);
      });
      var alertDialog = text;
      alertDialog.accept();
    });
  };

  /**
   * @ngdoc Methods
   * @name attachFile
   * @methodOf commons
   * @description Function to attach a file. For e.g. specify file name in your specs like this var filename = "../../poMapping/dash/DashLoginpage.JPG";
   *              You can also specify the path to a different folder having attachments
   * @param {String} filename name of file
   * @author Mayank Purohit
   */
  this.attachFile = function(filename){
    var fileToUpload = filename;
    var absolutePath = path.resolve(__dirname, fileToUpload);
    console.log(path.resolve(__dirname,filename));
    $('input[type="file"]').sendKeys(absolutePath);
  };

  /**
   * @ngdoc Methods
   * @name verifyElementAttribute
   * @methodOf commons
   * @description Verify the element attribute
   * @param {object} element on that page
   * @param {String} attribute element attribute
   * @param {String} expected attribute to check
   * @author Mayank Purohit
   */
  this.verifyElementAttribute = function (element, attribute, expected) {
    that.findElement(element).then(function (foundElement){
      expect(foundElement.getAttribute(attribute)).toBe(expected);
    });
  };

  /**
   * @ngdoc Methods
   * @name verifyElementAttributeDriver
   * @methodOf commons
   * @description Verify the element attribute
   * @param {object} element on that page
   * @param {String} attribute of that element
   * @param {String} expected attribute to check
   * @author Mayank Purohit
   */
  this.verifyElementAttributeDriver = function (element, attribute, expected) {
    that.findElementDriver(element).then(function (foundElement){
      expect(foundElement.getAttribute(attribute)).toBe(expected);
    });
  };


  /**
   * @ngdoc Methods
   * @name verifyElementText
   * @methodOf commons
   * @description Verify the element text
   * @param {object} element on that page
   * @param {String} text to check
   * @author Mayank Purohit
   */
  this.verifyElementText = function (element, text) {
    that.findElement(element).then(function (foundElement){
      expect(foundElement.getText()).toBe(text);
    });
  };

  /**
   * @ngdoc Methods
   * @name verifyElementTextDriver
   * @methodOf commons
   * @description Verify the element text
   * @param {object} element on that page
   * @param {String} text to check
   * @author Mayank Purohit
   */
  this.verifyElementTextDriver = function (element, text) {
    that.findElementDriver(element).then(function (foundElement){
      expect(foundElement.getText()).toBe(text);
    });
  };

    /**
     * @ngdoc Methods
     * @name getDateInUTCFormat
     * @methodOf commons
     * @description Return date in UTC forrmat
     * @param {string} dateParam: fetch the date as current, previous or next day
     * @author Bishwaroop Chakraborty
     */
    this.getDateInUTCFormat = function(dateParam){
        var date;
        var now = new Date();

        switch(dateParam){
            case "Previous Date":
                now.setDate(now.getDate() - 1);
                break;

            case "Current Date":
                now = now;
                break;

            case "Next Date":
                now.setDate(now.getDate() + 1);
                break;

            default:
                console.error('Date element/param not found');
        }

        now = now.toUTCString().split(' ');
        date = now[0]+ " "+now[2]+" "+now[1]+", "+now[3];
        return date;
    };


  /**
   * @ngdoc Methods
   * @name uploadFile
   * @methodOf commons
   * @description Uploading File
   * @param {string} Provide the path of the upload link
   * @author Ankur Sharma
   */

   this.uploadFile = function(ele){
      var filetoUpload = "../attachment/Winnie.jpg";
      var absolutePath = path.resolve(__dirname,filetoUpload);
      element(ele).sendKeys(absolutePath);
   };

};

module.exports = commons;