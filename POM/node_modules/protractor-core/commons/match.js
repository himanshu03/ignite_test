/**
 * @ngdoc object
 * @author Alex Arapu
 * @name match
 * @description
 * 	MATCH methods for jobs, profiles, recommendations, solr services <br>
 *  and other related methods
 */

var request = require('superagent');
var envConf = require('../conf/env_conf.js'), env = new envConf();
var ORPC = require('./orpc.js'), orpc = new ORPC();
var Commons = require('./commons.js'), commons = new Commons();

Array.prototype.sample = function() {
    return this[~~(Math.random() * this.length)];
};

function randomRange(min, max) {
    return ~~(Math.random() * (max - min + 1)) + min;
};

Array.prototype.isMember = function (string) {
    var values_array = [];
    var q = new RegExp('^' + string + '$', "g");
    for (var i = 0; i < this.length; i++) {
        if (this[i].match(q)){
            values_array.push(this[i]);
        }
    }
    return values_array[0] != undefined ? true : false;
};

String.prototype.replaceCategorySpecialChars = function() {
    return this.replace(/&/g, '-').replace(/,/g, '').replace(/\//g, '-').replace(/ /g, '-').replace(/--/g, '-').replace(/--/g, '-').toLowerCase();
};

var match = function (brw) {
    'use strict';
    var that = this;
    if(brw){
        that.browser = brw;
    }

    /******************************************************
     * Common Page Object Methods
     ******************************************************/

    /**
     * @ngdoc Methods
     * @name checkFreelancersSolrData
     * @methodOf match
     * @description check solr data
     * @param {string} key ciptherkey
     * @author Alex Arapu
     */
    this.checkFreelancersSolrData = function (key) {
        var deferredRequest = protractor.promise.defer();
        request
            .get(env.data.solr.profile + '?wt=json&q=recno_ciphertext:"' + key + '"')
            .set('Content-Type', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                } else {
                    var response = JSON.parse(res.text).response.docs[0]['doc_text_value']
                        + JSON.parse(res.text).response.docs[0]['skill_names_desc'];
                    deferredRequest.fulfill(response.toLowerCase());
                }
            });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name checkFreelancersSolrDataParam
     * @methodOf match
     * @description check solr data param
     * @param {string} key ciptherkey
     * @param {string} param parameter
     * @author Alex Arapu
     */
    this.checkFreelancersSolrDataParam = function (key, param) {
        var deferredRequest = protractor.promise.defer();
        request
            //.get(env.data.solr.profile + "?wt=json&q=id:" + id)
            .get(env.data.solr.profile + '?wt=json&q=recno_ciphertext:"' + key + '"')
            .set('Content-Type', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                } else {
                    var resp = JSON.parse(res.text).response.docs[0][param].toLowerCase();
                    deferredRequest.fulfill(resp);
                }
            });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getJobsForPageBySort
     * @methodOf match
     * @description get jobs data on first page by sorting criteria and store at file jobs_data.json
     * @param {string} sortCriteria value
     * @author Alex Arapu
     */
    this.getJobsForPageBySort = function (sortCriteria) {
        var deferredRequest = protractor.promise.defer();
        browser.driver.executeScript("return Applet.getVisitorId()").then(function (user) {
            request
                .get(env.data.match.job + "?spellcheck=1&highlight=1&q=*&sort=" + sortCriteria)
                .set('Content-Type', 'application/json')
                .set('X-USER', user)
                .set('X-LOCATION', 'visitor_jobs_search')
                .end(function (err, res) {
                    if (err) {
                        console.error(err);
                        deferredRequest.cancel(err);
                    } else {
                        deferredRequest.fulfill(JSON.parse(res.text).jobs);
                    }
                });
        });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getJobsTitles
     * @methodOf match
     * @description returns jobs titles from Jobs Search
     * @param {string} sortCriteria value
     * @returns {object} of job titles
     * @author Alex Arapu
     */
    this.getJobsTitles = function (sortCriteria) {
        var jobs = [];
        return that.getJobsForPageBySort(sortCriteria).then(function(data){
            data.forEach(function (job) {
                jobs.push(job.title);
            });
            return jobs;
        });
    };

    /**
     * @ngdoc Methods
     * @name getJobsStatisticData
     * @methodOf match
     * @description get jobs statistic data and store at file jobs_data.json
     * @author Alex Arapu
     */
    this.getJobsStatisticData = function () {
        var deferredRequest = protractor.promise.defer();
        browser.driver.executeScript("return Applet.getVisitorId()").then(function (user) {
            request
                .get(env.data.match.job + "?q=*&paging=1;0")
                .set('Content-Type', 'application/json')
                .set('X-USER', user)
                .set('X-LOCATION', 'visitor_jobs_search')
                .end(function (err, res) {
                    if (err) {
                        console.error(err);
                        deferredRequest.cancel(err);
                    } else {
                        deferredRequest.fulfill(res.text);
                    }
                });
        });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getCategories
     * @methodOf match
     * @description get list of jobs categories with subcategories from jobs_data.json file
     * @returns {string} jobs categories with subcategories as JSON
     * @author Alex Arapu
     */
    this.getCategories = function () {
        return that.getJobsStatisticData().then(function(data) {
            return JSON.parse(data).facets.categories;
        });
    };

    /**
     * @ngdoc Methods
     * @name getFreelancersMatchData
     * @methodOf match
     * @description returns all freelancers data
     * @param {string} keyword from search query
     * @param {string} param from match results
     * @param {string} index or position in search
     * @param {string} page number
     * @author Alex Arapu
     */
    this.getFreelancersMatchData = function (keyword, param, index, page) {
        var deferredRequest = protractor.promise.defer();
        keyword = keyword.substring(0,199).replace(/=/g,'%3D');
        if (!page) {page = 1;}
        browser.driver.executeScript("return Applet.getUser()").then(function (user) {
            if (user){
                orpc.getUserType().then(function(type){
                    var user_type = type == 'buyer' ? 'Client' : (type == 'provider' ? 'Freelancer' : 'Freelancer');
                    request
                        .get(env.data.match.profile + "?q=" + keyword + "&paging=" + (10 * page - 10) + ";" + 10 + "&profile_access=public,auth")
                        .set('Content-Type', 'application/json')
                        .set('X-LOCATION', 'user_profile_search')
                        .set('X-USER-TYPE', user_type)
                        .set('X-USER', user_type == 'Client' ? env.data.user.em : env.data.user.ic)
                        .end(function (err, res) {
                            if (err) {
                                console.error(err);
                                deferredRequest.cancel(err);
                            } else {
                                deferredRequest.fulfill(JSON.parse(res.text).data[index].data[param]);
                            }
                        });
                });
            }
            else{ //Applet.getVisitorId()
                request
                    .get(env.data.match.profile + "?q=" + keyword + "&paging=" + (10 * page - 10) + ";" + 10 + "&profile_access=public")
                    .set('Content-Type', 'application/json')
                    .set('X-LOCATION', 'visitor_profile_search')
                    .set('X-VISITOR', '172.27.243.10.1422626516')
                    .end(function (err, res) {
                        if (err) {
                            console.error(err);
                            deferredRequest.cancel(err);
                        } else {
                            deferredRequest.fulfill(JSON.parse(res.text).data[index].data[param]);
                        }
                    });
            }
        });

        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getAllFreelancersMatchData
     * @methodOf match
     * @description returns all freelancers data
     * @param {string} keyword from search query
     * @param {string} page number
     * @author Alex Arapu
     */
    this.getAllFreelancersMatchData = function (keyword, page) {
        var deferredRequest = protractor.promise.defer();
        keyword = keyword.substring(0,199).replace(/=/g,'%3D');
        if (!page) {page = 1;}
        browser.driver.executeScript("return Applet.getUser()").then(function (user) {
            if (user){
                orpc.getUserType().then(function(type){
                    var user_type = type == 'buyer' ? 'Client' : (type == 'provider' ? 'Freelancer' : 'Freelancer');
                    request
                        .get(env.data.match.profile + "?q=" + keyword + "&paging=" + (10 * page - 10) + ";" + 10 + "&profile_access=public,auth")
                        .set('Content-Type', 'application/json')
                        .set('X-LOCATION', 'user_profile_search')
                        .set('X-USER-TYPE', user_type)
                        .set('X-USER', user_type == 'Client' ? env.data.user.em : env.data.user.ic)
                        .end(function (err, res) {
                            if (err) {
                                console.error(err);
                                deferredRequest.cancel(err);
                            } else {
                                deferredRequest.fulfill(JSON.parse(res.text).data);
                            }
                        });
                });
            }
            else{
                browser.driver.executeScript("return Applet.getVisitorId()").then(function (visitorId) {
                    request
                        .get(env.data.match.profile + "?q=" + keyword + "&paging=" + (10 * page - 10) + ";" + 10 + "&profile_access=public")
                        .set('Content-Type', 'application/json')
                        .set('X-LOCATION', 'visitor_profile_search')
                        .set('X-VISITOR', visitorId)
                        .end(function (err, res) {
                            if (err) {
                                console.error(err);
                                deferredRequest.cancel(err);
                            } else {
                                deferredRequest.fulfill(JSON.parse(res.text).data);
                            }
                        });
                });
            }
        });

        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getFreelancersMatchRandomCategory
     * @methodOf match
     * @description returns random category from Match profiles
     * @author Alex Arapu
     */
    this.getFreelancersMatchRandomCategory = function () {
        var deferredRequest = protractor.promise.defer();
        request
            .get(env.data.match.profile)
            .set('Content-Type', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                    deferredRequest.cancel(err);
                } else {
                    deferredRequest.fulfill(Object.keys(JSON.parse(res.text).facets.category)[Math.floor(Math.random()*10)]);
                }
            });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getStashSkillsMapping
     * @methodOf match
     * @description returns Stash Skills Map from SFE
     * @param {string} skills_map value
     * @author Alex Arapu
     */
    this.getStashSkillsMapping = function (skills_map) {
        var deferredRequest = protractor.promise.defer();
        request
            .get(env.stash.skillsMapping)
            .set('Accept', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                    deferredRequest.cancel(err);
                } else {
                    var values_array = [];
                    var map;
                    for (var i = 0; i < JSON.parse(res.text).size; i++) {
                        var text = JSON.parse(res.text).lines[i].text.replace(/ /g,'').replace(/:/,'');
                        if (text == '301_skills') { map = text; }
                        else if (text == '301_renamed_skills') { map = text; }
                        else if (text == '301_move_skills_to_filter') { map = text; }
                        else if (text == 'rename_skills_to_queries') { map = text; }

                        if (JSON.parse(res.text).lines[i].text.match(/'.*:.*'/g) && map == skills_map){
                            values_array.push(JSON.parse(res.text).lines[i].text.match(/'.*:.*'/g)[0]);
                        }
                    }
                    deferredRequest.fulfill(values_array);
                }
            });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getStashTopSkills
     * @methodOf match
     * @description returns Stash Top Skills from SFE
     * @author Alex Arapu
     */
    this.getStashTopSkills = function () {
        var deferredRequest = protractor.promise.defer();
        request
            .get(env.stash.topSkills)
            .set('Accept', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                    deferredRequest.cancel(err);
                } else {
                    var values_array = [];
                    for (var i = 0; i < JSON.parse(res.text).size; i++) {
                        if (JSON.parse(res.text).lines[i].text.match(/'.*':/g)){
                            values_array.push(JSON.parse(res.text).lines[i].text.match(/ '.*':/g)[0].replace(/'/,'').replace(/:/,'').replace(/ /g,''));
                        }
                    }
                    deferredRequest.fulfill(values_array);
                }
            });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getStashMetaSkills
     * @methodOf match
     * @description returns Stash Meta Skills from SFE
     * @param {string} skill value
     * @author Alex Arapu
     */
    this.getStashMetaSkills = function (skill) {
        var deferredRequest = protractor.promise.defer();
        request
            .get(env.stash.metaSkills)
            .set('Accept', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                    deferredRequest.cancel(err);
                } else {
                    var values_array = [];
                    var map;
                    var templates = [];
                    var _default = [];
                    var devs_and_progs = [];
                    var professionals = [];
                    var translators = [];
                    var language = [];
                    var designers = [];
                    var writers = [];
                    for (var i = 0; i < JSON.parse(res.text).size; i++) {
                        var text = JSON.parse(res.text).lines[i].text.replace(/ /g,'').replace(/:/,'');
                        if (text == 'templates') { map = text;}
                        else if (text == 'skills') { map = text; }
                        else if (text == 'top_skills') { map = text; }

                        if (map == 'templates'){
                            if (text == '_default'){
                                templates.push(JSON.parse(res.text).lines[i].text.match(/'.*:.*'/g)[0]);
                            }

                        }

                        if (JSON.parse(res.text).lines[i].text.match(/'.*:.*'/g) && map == skill){
                            values_array.push(JSON.parse(res.text).lines[i].text.match(/'.*:.*'/g)[0]);
                        }
                    }
                    deferredRequest.fulfill(values_array);
                }
            });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @name getStashMetaCategories
     * @methodOf match
     * @description returns Stash Meta Categories from SFE
     * @author Alex Arapu
     */
    this.getStashMetaCategories = function () {
        var deferredRequest = protractor.promise.defer();
        request
            .get(env.stash.metaCategories)
            .set('Accept', 'application/json')
            .end(function (err, res) {
                if (err) {
                    console.error(err);
                    deferredRequest.cancel(err);
                } else {
                    var values_array = [];
                    for (var i = 0; i < JSON.parse(res.text).size; i++) {
                        if (JSON.parse(res.text).lines[i].text.match(/'.*':/g)){
                            values_array.push(JSON.parse(res.text).lines[i].text.match(/ '.*':/g)[0].replace(/'/,'').replace(/:/,'').replace(/ /g,''));
                        }
                    }
                    deferredRequest.fulfill(values_array);
                }
            });
        return deferredRequest.promise;
    };

    /**
     * @ngdoc Methods
     * @author Alex Arapu
     * @name getRedirectSkill
     * @methodOf match
     * @description Verify skill url
     * @param {object} redirect_skills config from stash
     * @param {string} skill to extract
     */
    this.getRedirectSkill = function (redirect_skills, skill){
        var skillMap = {};
        for (var i = 0; i < redirect_skills.length; i++) {
            var map = redirect_skills[i].replace(/'/g, '').replace(/ /g, '').split(':');
            skillMap[map[0]] = map[1];
        }
        return skillMap[skill] ? skillMap[skill] : skill;
    };

    /**
     * @ngdoc Methods
     * @author Alex Arapu
     * @name checkSkillInUrl
     * @methodOf match
     * @description Verify skill url
     * @param {object} redirect_skills config from stash
     * @param {string} skill to verify
     */
    this.checkSkillInUrl = function (redirect_skills, skill){
        return commons.getUrlText().then(function (url) {
            var the_skill = redirect_skills ? that.getRedirectSkill(redirect_skills, skill) : skill;
            var q = new RegExp('/skill/' + the_skill, "g");
            expect(url).toMatch(q);
        });
    };

};
module.exports = match;