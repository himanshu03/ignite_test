/**
 * @ngdoc object
 * @name webapi
 * @description
 * 	mobile api calls<br>
 *  See {@link http://visionmedia.github.io/superagent/} SuperAgent HTTP Request
 */

var request = require('superagent');


var webapi = function () {
  var that = this;


  /**
   * @ngdoc Methods
   * @name postMobileJob
   * @methodOf webapi
   * @description This will use the mobile ghost post web api to post your job. You must log in first. It will return the jobid afterward.
   * @param {json} requestBody for posting the job.
   *   <pre>
   var jobInfo =
   {
     "budget": null,
     "type":"hourly",
     "duration":"2",
     "companyReference": "1224767",
     "team":"1224767",
     "category": "Web Development",
     "subcategory": "Web Programming",
     "title":"API Job Post Fixed 200 " + random,
     "description": "API Job Post Description Fixed 200 " + random,
     "postType":"general"
   };
   var jobInfo =
   {
     "budget": 200,
     "type":"fixed-price",
     "duration":"",
     "companyReference": "1224767",
     "team":"1224767",
     "category": "Web Development",
     "subcategory": "Web Programming",
     "title":"API Job Post Fixed 200 " + random,
     "description": "API Job Post Description Fixed 200 " + random,
     "postType":"general"
   };
   </pre>
   */
  this.postMobileJob = function (jobInfo) {
    var requestBody = '{'+
      '"budget": ' + jobInfo.budget + ','+
      '"type": "' + jobInfo.type + '",'+
      '"duration":"' + jobInfo.duration + '",'+
      '"companyReference": "' + jobInfo.companyReference + '",'+
      '"team": "' + jobInfo.team + '",'+
      '"category":"' + jobInfo.category + '",'+
      '"subcategory": "' + jobInfo.subcategory + '",'+
      '"title":"' + jobInfo.title + '",'+
      '"description":"' + jobInfo.description + '",'+
      '"postType":"' + jobInfo.postType + '"'+
      '}';
    var deferredRequest = protractor.promise.defer();
    var sessionId;
    browser.manage().getCookie("staging_session_id").then(function(id){
      sessionId = id;
      console.log("sessionId == "+sessionId.value);
      request
        .post("https://stage.upwork.com/mobile/api/v0/companies/" + jobInfo.companyReference + "/jobpostings")
        .set('Accept', 'application/json')
        .set('Content-Type', 'application/json')
        .set("Cookie", "staging_session_id="+sessionId.value+";")
        .send(requestBody)
        .end(function (err, res) {
          if (err) {
            deferredRequest.cancel(err);
          } else {
            console.log("Post Job: " + jobInfo.title);
            deferredRequest.fulfill(res);
          }
        });
    });
    return deferredRequest.promise;
  };

  /**
   * @ngdoc Methods
   * @name sendOfferToFreelancer
   * @methodOf webapi
   * @description This will use to send a offer to freelancer.
   * @param {json} requestBody for posting the job.
   *   <pre>
   var requestBody = {
        "applicationId": "",   //"value of application id"
        "companyReference": "2842890",  //"value client context"
        "teamId": "2842890",   //"value of client team id"
        "contractorId": "~0163fea74ca068ac73",     //"value of freelancer profile id"
        "title": "", //"${jobs.fixedTitle1}"
        "jobType": "Fixed",
        "closeOnAccept": false,
        "jobCategory": "Web, Mobile & Software Dev",
        "charge": 250,
        "milestones": [{"deposit":250,"description":null}],
        "jobReference":""      //"value of job id"
    };
   </pre>
   */
  this.sendOfferToFreelancer = function (requestBody) {
    var body = '{'+
        '"applicationId": "' + requestBody.applicationId + '",'+
        '"companyReference": "' + requestBody.companyReference + '",'+
        '"teamId":"' + requestBody.teamId + '",'+
        '"contractorId": "' + requestBody.contractorId + '",'+
        '"title": "' + requestBody.title + '",'+
        '"closeOnAccept":' + requestBody.closeOnAccept + ','+
        '"jobCategory": "' + requestBody.subcategory + '",'+
        '"charge":' + requestBody.charge + ','+
        '"milestones":' + requestBody.milestones + ','+
        '"jobReference":"' + requestBody.jobReference + '"'+
        '}';
    var deferredRequest = protractor.promise.defer();
    browser.manage().getCookie("staging_XSRF-TOKEN").then(function(cookie){
      request
          .post("https://stage.upwork.com/mobile/api/v0/offers")
          .set('Accept', 'application/json')
          .set('Content-Type', 'application/json')
          .set('X-Odesk-Csrf-Token', cookie.value)
          .send(body)
          .end(function (err, res) {
            if (err) {
              deferredRequest.cancel(err);
            } else {
              deferredRequest.fulfill(res);
            }
          });
    });
    return deferredRequest.promise;
  };

    /**
     * @ngdoc Methods
     * @name sendInvitationToFreelancer
     * @methodOf webapi
     * @description This will use to send a invitation to freelancer for a job.
     * @param {json} requestBody for send invitation.
     *   <pre>
     var requestBody = {
        "contractorId": "~0163fea74ca068ac73",     //"value of freelancer profile id"
        "jobPostingId":""      //"value of job id",
        "body": "message"
    };
     </pre>
     */
    this.sendInvitationToFreelancer = function (requestBody) {
        var body = '{'+
            '"jobPostingId": ' + requestBody.jobPostingId + ','+
            '"body": "' + requestBody.body + '"'+
            '}';
        var deferredRequest = protractor.promise.defer();
        browser.manage().getCookie("staging_XSRF-TOKEN").then(function(cookie){
            request
                .put("https://stage.upwork.com/mobile/api/v0/contractors/"+requestBody.contractorId)
                .set('Accept', 'application/json')
                .set('Content-Type', 'application/json')
                .set('X-Odesk-Csrf-Token', cookie.value)
                .send(body)
                .end(function (err, res) {
                    if (err) {
                        deferredRequest.cancel(err);
                    } else {
                        deferredRequest.fulfill(res);
                    }
                });
        });
        return deferredRequest.promise;
    };


};
module.exports = webapi;
