/**
 * Created by lle on 7/23/15.
 */

var fs = require('fs');
path = require('path');
var resemble = require('node-resemble-js');
var commons = require('./commons.js'), commonsMethod = new commons();

var resembleAppScreen = function () {

  'use strict';
  var that = this;

  beforeEach(function () {

  });

  this.takeScreenShot = function (filename, actualpath) {
    browser.takeScreenshot().then(function (data) {
      var file_path = path.resolve(actualpath + filename);
      var stream = fs.createWriteStream(file_path);
      stream.write(new Buffer(data, 'base64'));
      stream.end();
    });
  };

  this.compareScreenShot = function (filename, actualpath, expectedpath) {
    var diff = resemble(actualpath + filename).compareTo(expectedpath + filename).ignoreNothing().onComplete(function(data){
      console.log(data);
      if(data.misMatchPercentage > 6){
        var png = data.getDiffImage();
        png.pack().pipe(fs.createWriteStream(actualpath+filename+'diff.png'));
        expect("1"=="1").toBeFalsy("Mismatch is high");
      }
    });
  };

  this.verifyCSS = function (cssPath, cssProperty) {
    for (var num = 0; num < cssProperty.length; num++) {
      (function(num){
        commonsMethod.findElementDriver(cssPath).then(function(ele){
          ele.getCssValue(cssProperty[num].property).then(function(data){
            console.log("Checking "+ cssProperty[num].property +" value for css");
            expect(data).toContain(cssProperty[num].value, cssProperty[num].property + " is not correct");
          });
        })
      })(num);
    }

  };

};
module.exports = resembleAppScreen;	//naming the page object